"""Initial schema

Revision ID: f65c2e5bd9f8
Revises: 
Create Date: 2025-07-20 17:20:27.076132

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'f65c2e5bd9f8'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('collection_games', 'added_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('game_achievements', 'points',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('0'))
    op.alter_column('game_achievements', 'is_hidden',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
    op.alter_column('game_achievements', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('game_achievements', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint(op.f('game_achievements_game_id_platform_id_platform_achievement__key'), 'game_achievements', type_='unique')
    op.create_unique_constraint('uq_game_platform_achievement', 'game_achievements', ['game_id', 'platform_id', 'platform_achievement_id'])
    op.alter_column('game_collections', 'is_smart',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
    op.alter_column('game_collections', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('game_collections', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint(op.f('game_collections_library_id_name_key'), 'game_collections', type_='unique')
    op.create_unique_constraint('uq_library_collection_name', 'game_collections', ['library_id', 'name'])
    op.add_column('game_matches', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False))
    op.alter_column('game_matches', 'verified',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
    op.alter_column('game_matches', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint(op.f('game_matches_primary_game_id_matched_game_id_key'), 'game_matches', type_='unique')
    op.create_unique_constraint('uq_primary_matched_game', 'game_matches', ['primary_game_id', 'matched_game_id'])
    op.alter_column('games', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('games', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index(op.f('idx_games_esrb_rating'), table_name='games')
    op.drop_index(op.f('idx_games_metacritic_score'), table_name='games', postgresql_where='(metacritic_score IS NOT NULL)')
    op.drop_index(op.f('idx_games_normalized_title'), table_name='games')
    op.drop_index(op.f('idx_games_psn_id'), table_name='games', postgresql_where='(psn_id IS NOT NULL)')
    op.drop_index(op.f('idx_games_release_date'), table_name='games', postgresql_where='(release_date IS NOT NULL)')
    op.drop_index(op.f('idx_games_search_vector'), table_name='games', postgresql_using='gin')
    op.drop_index(op.f('idx_games_steam_appid'), table_name='games', postgresql_where='(steam_appid IS NOT NULL)')
    op.drop_index(op.f('idx_games_xbox_id'), table_name='games', postgresql_where='(xbox_id IS NOT NULL)')
    op.add_column('platforms', sa.Column('base_url', sa.String(length=500), nullable=True))
    op.alter_column('platforms', 'platform_code',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=50),
               existing_nullable=False)
    op.alter_column('platforms', 'api_available',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
    op.alter_column('platforms', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('platforms', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.add_column('sync_operations', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False))
    op.alter_column('sync_operations', 'started_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('sync_operations', 'games_processed',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('0'))
    op.alter_column('sync_operations', 'games_added',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('0'))
    op.alter_column('sync_operations', 'games_updated',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('0'))
    op.alter_column('sync_operations', 'errors_count',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('0'))
    op.alter_column('sync_operations', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_achievements', 'progress_percentage',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('100'))
    op.alter_column('user_achievements', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint(op.f('user_achievements_user_game_id_achievement_id_key'), 'user_achievements', type_='unique')
    op.create_unique_constraint('uq_user_game_achievement', 'user_achievements', ['user_game_id', 'achievement_id'])
    op.alter_column('user_games', 'owned',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('true'))
    op.alter_column('user_games', 'total_playtime_minutes',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('0'))
    op.alter_column('user_games', 'game_status',
               existing_type=sa.VARCHAR(length=50),
               nullable=False,
               existing_server_default=sa.text("'unplayed'::character varying"))
    op.alter_column('user_games', 'is_favorite',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
    op.alter_column('user_games', 'last_synced_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_games', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_games', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index(op.f('idx_user_games_favorites'), table_name='user_games', postgresql_where='(is_favorite = true)')
    op.drop_index(op.f('idx_user_games_last_played'), table_name='user_games', postgresql_where='(last_played_at IS NOT NULL)')
    op.drop_index(op.f('idx_user_games_library_id'), table_name='user_games')
    op.drop_index(op.f('idx_user_games_playtime'), table_name='user_games')
    op.drop_index(op.f('idx_user_games_status'), table_name='user_games')
    op.drop_constraint(op.f('user_games_library_id_game_id_key'), 'user_games', type_='unique')
    op.create_unique_constraint('uq_library_game', 'user_games', ['library_id', 'game_id'])
    op.alter_column('user_libraries', 'sync_enabled',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('true'))
    op.alter_column('user_libraries', 'sync_status',
               existing_type=sa.VARCHAR(length=50),
               nullable=False,
               existing_server_default=sa.text("'pending'::character varying"))
    op.alter_column('user_libraries', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_libraries', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index(op.f('idx_user_libraries_last_sync'), table_name='user_libraries')
    op.drop_index(op.f('idx_user_libraries_platform'), table_name='user_libraries')
    op.drop_index(op.f('idx_user_libraries_sync_status'), table_name='user_libraries')
    op.drop_constraint(op.f('user_libraries_platform_id_user_identifier_key'), 'user_libraries', type_='unique')
    op.create_unique_constraint('uq_platform_user', 'user_libraries', ['platform_id', 'user_identifier'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('uq_platform_user', 'user_libraries', type_='unique')
    op.create_unique_constraint(op.f('user_libraries_platform_id_user_identifier_key'), 'user_libraries', ['platform_id', 'user_identifier'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_user_libraries_sync_status'), 'user_libraries', ['sync_status'], unique=False)
    op.create_index(op.f('idx_user_libraries_platform'), 'user_libraries', ['platform_id'], unique=False)
    op.create_index(op.f('idx_user_libraries_last_sync'), 'user_libraries', ['last_sync_at'], unique=False)
    op.alter_column('user_libraries', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_libraries', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_libraries', 'sync_status',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_server_default=sa.text("'pending'::character varying"))
    op.alter_column('user_libraries', 'sync_enabled',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('true'))
    op.drop_constraint('uq_library_game', 'user_games', type_='unique')
    op.create_unique_constraint(op.f('user_games_library_id_game_id_key'), 'user_games', ['library_id', 'game_id'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_user_games_status'), 'user_games', ['game_status'], unique=False)
    op.create_index(op.f('idx_user_games_playtime'), 'user_games', ['total_playtime_minutes'], unique=False)
    op.create_index(op.f('idx_user_games_library_id'), 'user_games', ['library_id'], unique=False)
    op.create_index(op.f('idx_user_games_last_played'), 'user_games', ['last_played_at'], unique=False, postgresql_where='(last_played_at IS NOT NULL)')
    op.create_index(op.f('idx_user_games_favorites'), 'user_games', ['is_favorite'], unique=False, postgresql_where='(is_favorite = true)')
    op.alter_column('user_games', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_games', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_games', 'last_synced_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_games', 'is_favorite',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('user_games', 'game_status',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_server_default=sa.text("'unplayed'::character varying"))
    op.alter_column('user_games', 'total_playtime_minutes',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('user_games', 'owned',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('true'))
    op.drop_constraint('uq_user_game_achievement', 'user_achievements', type_='unique')
    op.create_unique_constraint(op.f('user_achievements_user_game_id_achievement_id_key'), 'user_achievements', ['user_game_id', 'achievement_id'], postgresql_nulls_not_distinct=False)
    op.alter_column('user_achievements', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_achievements', 'progress_percentage',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('100'))
    op.alter_column('sync_operations', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('sync_operations', 'errors_count',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('sync_operations', 'games_updated',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('sync_operations', 'games_added',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('sync_operations', 'games_processed',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('sync_operations', 'started_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_column('sync_operations', 'updated_at')
    op.alter_column('platforms', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('platforms', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('platforms', 'api_available',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('platforms', 'platform_code',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=20),
               existing_nullable=False)
    op.drop_column('platforms', 'base_url')
    op.create_index(op.f('idx_games_xbox_id'), 'games', ['xbox_id'], unique=False, postgresql_where='(xbox_id IS NOT NULL)')
    op.create_index(op.f('idx_games_steam_appid'), 'games', ['steam_appid'], unique=False, postgresql_where='(steam_appid IS NOT NULL)')
    op.create_index(op.f('idx_games_search_vector'), 'games', ['search_vector'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_games_release_date'), 'games', ['release_date'], unique=False, postgresql_where='(release_date IS NOT NULL)')
    op.create_index(op.f('idx_games_psn_id'), 'games', ['psn_id'], unique=False, postgresql_where='(psn_id IS NOT NULL)')
    op.create_index(op.f('idx_games_normalized_title'), 'games', ['normalized_title'], unique=False)
    op.create_index(op.f('idx_games_metacritic_score'), 'games', ['metacritic_score'], unique=False, postgresql_where='(metacritic_score IS NOT NULL)')
    op.create_index(op.f('idx_games_esrb_rating'), 'games', ['esrb_rating'], unique=False)
    op.alter_column('games', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('games', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint('uq_primary_matched_game', 'game_matches', type_='unique')
    op.create_unique_constraint(op.f('game_matches_primary_game_id_matched_game_id_key'), 'game_matches', ['primary_game_id', 'matched_game_id'], postgresql_nulls_not_distinct=False)
    op.alter_column('game_matches', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('game_matches', 'verified',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
    op.drop_column('game_matches', 'updated_at')
    op.drop_constraint('uq_library_collection_name', 'game_collections', type_='unique')
    op.create_unique_constraint(op.f('game_collections_library_id_name_key'), 'game_collections', ['library_id', 'name'], postgresql_nulls_not_distinct=False)
    op.alter_column('game_collections', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('game_collections', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('game_collections', 'is_smart',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
    op.drop_constraint('uq_game_platform_achievement', 'game_achievements', type_='unique')
    op.create_unique_constraint(op.f('game_achievements_game_id_platform_id_platform_achievement__key'), 'game_achievements', ['game_id', 'platform_id', 'platform_achievement_id'], postgresql_nulls_not_distinct=False)
    op.alter_column('game_achievements', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('game_achievements', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('game_achievements', 'is_hidden',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('game_achievements', 'points',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('collection_games', 'added_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    # ### end Alembic commands ###
